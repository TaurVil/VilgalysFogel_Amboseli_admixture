# Load R libraries
library(dplyr)
library(ggplot2)
# Load ancestry in 100 kb windows for all Amboseli individuals
load("./100kb_ancestry_and_features.RData")
ancestry_windows <- cbind(new_windows, window_by_individual)
# Load demographic data for Amboseli individuals with confirmed ids, including the starting and endings years they were present in the population
# Other demographic data used in other scripts are also included in this data frame but which we won't use here (their sex, entry type (B = born into a study group, O = first observed in a new study group, or I = immigrating into a study group)
demog <- read.table("amboseli.demographic.info.txt", header=T)
# Get a list of individuals in the population that were present in each year
years_list <- seq(min(demog$start_year), max(demog$end_year)) # get list of all unique years in the demographic data
max(years_list) # 2021
# Remove 2021 because we do not have data for the entire year
years_list <- years_list[1:length(years_list)-1]
for (i in 1:length(years_list)) { # run for each year in the data set
tmp <- demog[demog$start_year<=years_list[i] & demog$end_year>=years_list[i],] # for each year, get individuals present in the population during that year
tmp2 <- tmp[c(1)] # get individual ids
tmp2[,2] <- years_list[i] # add focal year to the data frame
if (i==1) {tmp2 -> years}
if (i>1) {rbind(years, tmp2) -> years}
}
colnames(years)[2] <- c("year")
# How many individuals are present in the population every year?
tmp <- years %>% group_by(year) %>% tally()
# Visualize the number of individuals present in the population every year
ggplot(data=tmp) +geom_col(aes(year, n), color="white") + geom_text(aes(year,n, label=n), vjust=-1, size=3) + theme_classic() + theme(text=element_text(size=12), axis.text = element_text(color="black")) #+ geom_vline(aes(xintercept=1979-0.5), linetype="dashed", color="steelblue3", size=1) # we have between 1-5 individuals through 1978 and then approximately double individuals in our sample in 1979 to 11
# We'll start our analysis in 1979 where we begin to have more than just a handful of individuals so that we can get an estimate of average ancestry in the population per year
tmp <- tmp[tmp$year>=1979,]
min(tmp$n) # minimum of 11 individuals resequenced per year
max(tmp$n) # maximum of 228 individuals resequenced per year
round(mean(tmp$n),3) # mean of 135.19 individuals resequenced per year
which(years_list>=1979) # 9-50
years_list <- years_list[9:50]
# For each year, get the average anubis ancestry in the population in each 100 kb window
for (i in 1:length(years_list)) {
tmp <- years[years$year==years_list[i],] # get the list of individuals to include for the focal year
which(colnames(ancestry_windows) %in% tmp$table_s1_id) -> k
tmp2 <- ancestry_windows[c(1:3,k)]
tmp2$na_count <- rowSums(is.na(tmp2[c(4:ncol(tmp2))])) # count any NAs
tmp2$pop_avg_anubis_admix <- (rowSums(tmp2[c(4:(ncol(tmp2)-1))], na.rm=T))/(length(k)-tmp2$na_count) # get the average anubis ancestry at each 250 kb genomic window (accounting for any individuals wiht NAs)
tmp2$indiv_count <- length(k) # add the number of individuals included in the focal year year in the population (the number of individuals actually used for estimating average anubis ancestry at each site would be indiv_count-na_count)
tmp3 <- tmp2[names(tmp2) %in% c("chr", "start", "end", "na_count", "pop_avg_anubis_admix", "indiv_count")] # only keep the columns we need
tmp3[,7] <- years_list[i] # add the focal year
if (i==1) {tmp3 -> ancestry_year} # if this is the first year, create a new data frame called ancestry_year
if (i>1) {rbind(ancestry_year, tmp3) -> ancestry_year} # if this is not the first year, add to the focal year's data to the existing data frame ancestry_year
print(i)
}
colnames(ancestry_year)[7] <- c("year")
# Get the middle position in each window
ancestry_year$pos <- ((ancestry_year$end-ancestry_year$start)/2)+ancestry_year$start
# Make a unique id per window
ancestry_year$id <- paste(ancestry_year$chr, ancestry_year$pos, sep="_")
# For each genomic window, calculate the change in anubis ancestry over time (get the slope)
# Get a list of the unique genomic windows we'll be evaluating
ancestry2 <- ancestry_windows %>% select(chr, start, end)
# Same as with the ancestry_year data frame - get the middle position in each window
ancestry2$pos <- ((ancestry2$end-ancestry2$start)/2)+ancestry2$start
# Make a unique id per window
ancestry2$id <- paste(ancestry2$chr, ancestry2$pos, sep="_")
ancestry_change <- ancestry2
for (i in 1:nrow(ancestry2)) {
tmp <- ancestry_year[ancestry_year$id==ancestry2$id[i],]
ancestry_change[i,6] <- lm(pop_avg_anubis_admix~year, data=tmp)$coeff[2] # grab the beta for year
tmp2 <- tmp[tmp$year==min(tmp$year),]
ancestry_change[i,7] <- tmp2$pop_avg_anubis_admix # grab the average anubis ancestry in the population in the starting year of the analysis (1979)
ancestry_change[i,8] <- nrow(tmp) #  number of years included in the model (should be 42 years for every genomic window since we have no NAs for average anubis ancestry in the population in the ancestry_year data frame)
print(i)
}
colnames(ancestry_change)[6:8] <- c("annual_anubis_change_beta", "starting_pop_avg_anubis_admix_1979", "year_count")
min(ancestry_change$year_count) # all genomic windows used 42 years (what we expect)
min(ancestry_change$year_count, na.rm=T) # all genomic windows used 42 years (what we expect)
# Script for recreating figure 1B and S4
# Load R libraries
library(ggplot2)
library(dplyr)
library(data.table)
# Load genotype data needed for PCA
load("~/for_pca.RData", verbose=T)
# Load genotype data needed for PCA
load("./for_pca.RData", verbose=T)
# Load genotype data needed for PCA
load("../../04_hybrid-zone-structure/04.1.PCA_of_the_hybrid_zone/for_pca.RData", verbose=T)
# Load genotype data needed for PCA
load("../../04_hybrid-zone-structure/04.1.PCA_of_the_hybrid_zone/covgeno_highcov_4Aug2021.Rd", verbose=T)
save.image("~/GitHub/VilgalysFogel_Amboseli_admixture/04_hybrid-zone-structure/04.1.PCA_of_the_hybrid_zone/for_pca.RData")
colnames(covgeno_highcov)
covgeno_highcov[1:5,1:4]
# PCA of high coverage samples
# Need to remove low coverage data
names$V1[-c(34:46,58:60,65)]
length(names$V1[-c(34:46,58:60,65)])==55 # TRUE - should equal 55
pcrat <- prcomp(covgeno_highcov,scale.=T) # perform PCA on genotype covariance using only high coverage individuals
tmp <- as.data.frame(pcrat$x)
# BGDP anubis individuals are made up of wild caught Aberdares individuals (panu_30877, panu_30977) and SNPRC individuals (panu_L142,  panu_LIV5); BGDP yellow individual is from Mikumi
names_tmp <- names
# find the row numbers of the BGDP individuals you want to relabel
# BGDP individiduals from SW
rownames(names_tmp)[names_tmp$V1 %like% "panu_L"] # 49,50
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
names_tmp$source <- c(rep("Amboseli",9), rep("SNPRC",24), rep("Mara", 7), rep("WNPRC",6), rep("BGDPanubis",4), rep("SNPRC",7), rep("Mikumi",15))
names_tmp$source[c(49:50)] <- "SNPRC"
names_tmp$source[c(47:48)] <- "Aberdares"
summary(pcrat)
names_tmp$source2 <- factor(names_tmp$source, levels=c("Amboseli", "Mikumi", "Aberdares", "SNPRC"))
b <- ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), shape=21, size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), legend.position = "none", axis.text = element_text(color="black"))  + scale_fill_manual(values = c("AMB"="darkorange2", "Aberdares"="#009E73", "SW"="grey70", "Mik"="gold1")) + scale_color_manual(values = c("AMB"="darkorange2", "Aberdares"="springgreen4", "SW"="grey55", "Mik"="gold2")) + scale_x_continuous(name="PC1 (84% variance explained)") + scale_y_continuous(name="PC2 (2% variance explained)"); b
# get legend
ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), shape=21, size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=25), legend.position = "right", legend.title = element_blank(), axis.text = element_text(color="black"))  + scale_fill_manual(values = c("AMB"="darkorange2", "Aberdares"="#009E73", "SW"="grey70", "Mik"="gold1")) + scale_color_manual(values = c("AMB"="darkorange2", "Aberdares"="springgreen4", "SW"="grey55", "Mik"="gold2")) + scale_x_continuous(name="PC1 (0.84)") + scale_y_continuous(name="PC2 (0.02)")
b <- ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), shape=21, size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), legend.position = "none", axis.text = element_text(color="black"))  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="springgreen4", "SNPRC"="grey55", "Mikumi"="gold2")) + scale_x_continuous(name="PC1 (84% variance explained)") + scale_y_continuous(name="PC2 (2% variance explained)"); b
b <- ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), shape=21, size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), legend.position = "none", axis.text = element_text(color="black"))  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="springgreen4", "SNPRC"="grey55", "Mikumi"="gold2")) + scale_x_continuous(name="PC1 (84% variance explained)") + scale_y_continuous(name="PC2 (2% variance explained)"); b
# get legend
ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), shape=21, size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=25), legend.position = "right", legend.title = element_blank(), axis.text = element_text(color="black"))  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="springgreen4", "SNPRC"="grey55", "Mikumi"="gold2")) + scale_x_continuous(name="PC1 (0.84)") + scale_y_continuous(name="PC2 (0.02)")
# zoom in on "yellow-like" individuals
ggplot(data=tmp) + geom_point(aes(factor(as.factor(names_tmp$source2[-c(34:46,58:60,65)]), levels=c("Mik",  "SW", "AMB", "Aberdares")), PC1, col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), size=4, alpha=0.8, shape=21, stroke=1.5) + coord_flip() + theme_classic() + theme(text=element_text(size=19), legend.position = "none", axis.text = element_text(color="black"), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + scale_fill_manual(values = c("AMB"="darkorange2", "Aberdares"="#009E73", "SW"="grey70", "Mik"="#FFED4F")) + scale_color_manual(values = c("AMB"="darkorange2", "Aberdares"="springgreen4", "SW"="grey55", "Mik"="gold1")) + scale_y_continuous(limits=c(-7.8,-6))
# zoom in on "yellow-like" individuals
ggplot(data=tmp) + geom_point(aes(factor(as.factor(names_tmp$source2[-c(34:46,58:60,65)]), levels=c("Mikumi",  "SNPRC", "Amboseli", "Aberdares")), PC1, col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), size=4, alpha=0.8, shape=21, stroke=1.5) + coord_flip() + theme_classic() + theme(text=element_text(size=19), legend.position = "none", axis.text = element_text(color="black"), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + scale_fill_manual(values = c("AMB"="darkorange2", "Aberdares"="#009E73", "SW"="grey70", "Mik"="#FFED4F")) + scale_color_manual(values = c("AMB"="darkorange2", "Aberdares"="springgreen4", "SW"="grey55", "Mik"="gold1")) + scale_y_continuous(limits=c(-7.8,-6))
# zoom in on "yellow-like" individuals
ggplot(data=tmp) + geom_point(aes(factor(as.factor(names_tmp$source2[-c(34:46,58:60,65)]), levels=c("Mikumi",  "SNPRC", "Amboseli", "Aberdares")), PC1, col=factor(names_tmp$source2[-c(34:46,58:60,65)]), fill=factor(names_tmp$source2[-c(34:46,58:60,65)])), size=4, alpha=0.8, shape=21, stroke=1.5) + coord_flip() + theme_classic() + theme(text=element_text(size=19), legend.position = "none", axis.text = element_text(color="black"), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="#FFED4F")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="springgreen4", "SNPRC"="grey55", "Mikumi"="gold1")) + scale_y_continuous(limits=c(-7.8,-6))
pcrat <- prcomp(covgeno,scale.=T) # perform PCA on genotype covariance using all individuals regardless of their coverage
tmp <- as.data.frame(pcrat$x)
# BGDP anubis individuals are made up of wild caught Aberdares individuals (panu_30877, panu_30977) and SW individuals (panu_L142,  panu_LIV5); BGDP yellow individual is from Mikumi
names_tmp <- names
# find the row numbers of the BGDP individuals you want to relabel
# BGDP individiduals from SW
rownames(names_tmp)[names_tmp$V1 %like% "panu_L"] # 49,50
# BGDP individuals from Mikumi
rownames(names_tmp)[names_tmp$V1 %like% "pcyn_16066"] # 72
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
names_tmp$source[c(49:50)] <- "SW"
names_tmp$source[c(47:48)] <- "Aberdares"
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
pcrat <- prcomp(covgeno,scale.=T) # perform PCA on genotype covariance using all individuals regardless of their coverage
tmp <- as.data.frame(pcrat$x)
# BGDP anubis individuals are made up of wild caught Aberdares individuals (panu_30877, panu_30977) and SW individuals (panu_L142,  panu_LIV5); BGDP yellow individual is from Mikumi
names_tmp <- names
# find the row numbers of the BGDP individuals you want to relabel
# BGDP individiduals from SW
rownames(names_tmp)[names_tmp$V1 %like% "panu_L"] # 49,50
# BGDP individuals from Mikumi
rownames(names_tmp)[names_tmp$V1 %like% "pcyn_16066"] # 72
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
pcrat <- prcomp(covgeno,scale.=T) # perform PCA on genotype covariance using all individuals regardless of their coverage
tmp <- as.data.frame(pcrat$x)
# BGDP anubis individuals are made up of wild caught Aberdares individuals (panu_30877, panu_30977) and SNPRC individuals (panu_L142,  panu_LIV5); BGDP yellow individual is from Mikumi
names_tmp <- names
# find the row numbers of the BGDP individuals you want to relabel
# BGDP individiduals from SNPRC
rownames(names_tmp)[names_tmp$V1 %like% "panu_L"] # 49,50
# BGDP individuals from Mikumi
rownames(names_tmp)[names_tmp$V1 %like% "pcyn_16066"] # 72
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
names_tmp$source[c(49:50)] <- "SNPRC"
names_tmp$source[c(47:48)] <- "Aberdares"
summary(pcrat)
names_tmp$source2 <- factor(names_tmp$source, levels=c("Amboseli", "Mikumi", "Aberdares", "Mara", "WNPRC", "SNPRC"))
# assign low and high coverage
names_tmp$coverage <- NA
names_tmp$coverage[-c(34:46,58:60,65)] <- "high"
names_tmp[,c("coverage")][is.na(names_tmp[,c("coverage")])] <- "low"
# without legend
ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2), fill=factor(names_tmp$source2), shape=factor(names_tmp$coverage)), size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), axis.text = element_text(color="black"), legend.position = "none")  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F"))  + scale_shape_manual(values=c("high"=21, "low"=24)) + scale_x_continuous(name="PC1 (0.53 PVE)") + scale_y_continuous(name="PC2 (0.16 PVE)")
# with legend
names_tmp$source <- c(rep("Amboseli",9), rep("SNPRC",24), rep("Mara", 7), rep("WNPRC",6), rep("BGDPanubis",4), rep("SNPRC",7), rep("Mikumi",15))
# find the row numbers of the BGDP individuals you want to relabel
# BGDP individiduals from SNPRC
rownames(names_tmp)[names_tmp$V1 %like% "panu_L"] # 49,50
# BGDP individuals from Mikumi
rownames(names_tmp)[names_tmp$V1 %like% "pcyn_16066"] # 72
# BGDP individuals from Aberdares
rownames(names_tmp)[names_tmp$V1 %like% "panu_3"] # 47,48
names_tmp$source[c(49:50)] <- "SNPRC"
names_tmp$source[c(47:48)] <- "Aberdares"
summary(pcrat)
names_tmp$source2 <- factor(names_tmp$source, levels=c("Amboseli", "Mikumi", "Aberdares", "Mara", "WNPRC", "SNPRC"))
# assign low and high coverage
names_tmp$coverage <- NA
names_tmp$coverage[-c(34:46,58:60,65)] <- "high"
names_tmp[,c("coverage")][is.na(names_tmp[,c("coverage")])] <- "low"
# without legend
ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2), fill=factor(names_tmp$source2), shape=factor(names_tmp$coverage)), size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), axis.text = element_text(color="black"), legend.position = "none")  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F"))  + scale_shape_manual(values=c("high"=21, "low"=24)) + scale_x_continuous(name="PC1 (0.53 PVE)") + scale_y_continuous(name="PC2 (0.16 PVE)")
# with legend
ggplot(data=tmp) + geom_point(aes(PC1, PC2,  col=factor(names_tmp$source2), fill=factor(names_tmp$source2), shape=factor(names_tmp$coverage)), size=4, alpha=0.8, stroke=1.5) + theme_classic() + theme(text=element_text(size=18), axis.text = element_text(color="black"))  + scale_fill_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F")) + scale_color_manual(values = c("Amboseli"="darkorange2", "Aberdares"="#009E73", "SNPRC"="grey70", "Mikumi"="gold1", "WNPRC"="forestgreen", "Mara"="#00B81F"))  + scale_shape_manual(values=c("high"=21, "low"=24)) + scale_x_continuous(name="PC1 (0.53 PVE)") + scale_y_continuous(name="PC2 (0.16 PVE)")
